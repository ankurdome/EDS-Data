# -*- coding: utf-8 -*-
"""Practical 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N8qQ_j9T9ToK-9q1FjMWvaTY0YtFC3Fx
"""

import csv
import numpy as np

#Functions
def listmaker(x):
 lists=[]
 for i in range(1, len(data1)):
  lists.append(data1[i][x])
 return lists

def listmaker1(x,y):
 lists=[]
 for i in range(1,len(data1)):
  lists.append(data1[i][x:y])
 return lists

def listmaker2(x,y):
 lists=[]
 for i in range(1,len(data1)):
  lists.append(data2[i][x:y])
 return lists

def FloatConverter(x):
 for i in range(len(x)):
  for j in range(len(x[i])):
   x[i][j] = float(x[i][j])

def IntConverter(x):
 for i in range(len(x)):
  for j in range(len(x[i])):
   x[i][j] = int(x[i][j])

file1 = open("/content/testmarks1.csv")
data1 = list(csv.reader(file1))
print(data1)
file2 = open("/content/testmarks2.csv")
data2 = list(csv.reader(file2))
print(data2)

EDS_marks= listmaker(1)
EDS_marks = [float(i) for i in EDS_marks]
EDS_marks = [int(i) for i in EDS_marks]
print(EDS_marks)
SON_marks= listmaker(2)
SON_marks = [float(i) for i in SON_marks]
SON_marks = [int(i) for i in SON_marks]
DT_marks= listmaker(3)
DT_marks = [float(i) for i in DT_marks]
ET_marks= listmaker(4)
ET_marks = [float(i) for i in ET_marks]
Marks1 = listmaker1(1,5)
FloatConverter(Marks1)
print(Marks1)
FloatConverter(Marks2)
print(Marks2)
print()

print("Addition of Marks:\n", np.add(Marks1,Marks2))
print()
print("Substraction of Marks:\n", np.subtract(Marks1,Marks2))
print()
print("Multiplication of Marks:\n", np.multiply(Marks1,Marks2))
print()
print("Division of Marks:\n", np.divide(Marks1,Marks2))
print()
print("The horizontal stacking of Data:\n", np.hstack((data1,data2)))
print()
print("The vertical stacking of Data:\n", np.vstack((data1,data2)))
print()
print("Sum of the arrays:\n",Marks1+Marks2)
print()
print("Bitwiise and():\n",np.bitwise_and(EDS_marks,SON_marks))
print()
print("Bitwiise or():\n",np.bitwise_or(EDS_marks,SON_marks))
print()
print("The sin value of EDS marks:")
for i in range(len(EDS_marks)):
 print(np.sin(EDS_marks[i]*np.pi/180))
print()
print("The Round off of Marks1:")
print(np.around(Marks1,0))
print()
print("The Round off of Marks1 upto 2 decimals points:")
print(np.around(Marks1,2))
print()
print("The Floor Value Marks1:")
print(np.floor(Marks1))
print()
print("The Floor Value Marks2:")
print(np.ceil(Marks2))
print()
print("\nThe minimum element among the Marks1:",np.amin(Marks1))
print()
print("The maximum element among the Marks2:",np.amax(Marks2))
print()
print("\nMedian of Marks1:",np.median(Marks1))
print()
print("Mean of Marks2:",np.mean(Marks2))
print()
print("Average of Marks2:",np.average(Marks2))
print()
print("Sorting along the columns:")
print(np.sort(Marks1))
print()
print("Sorting along the rows:")
print(np.sort(Marks2,0))
print()
print("Data Stacking:\n",np.stack((Marks1, Marks2)))
print()
print("Searching:\n",np.where(EDS_marks == 43))
print()
print("Counting of EDS:\n",np.bincount(EDS_marks))
print()

broadcast = Marks1 + Marks2
print("Broadcast:\n",broadcast)
print()
Marks_Alpha = Marks1.copy()
print("Copied Array:\n",Marks_Alpha)
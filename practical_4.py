# -*- coding: utf-8 -*-
"""Practical 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QuGpAt4JNiPPtZIlYJnulBpaKI8Wpix3
"""

#NAME: Ankur Dome
#ROLL: 508
#PRN: 202201040191

import pandas as pd
def city(address):
    return address.split(",")[1].strip(" ")

df = pd.read_csv("/content/1686715083343_all_data.csv")
print(df)
print()
#NAN
nan_df = df[df.isna().any(axis=1)]
display(nan_df.head())
df = df.dropna(how='all')
df.head()
#Adding Month Column
df["Month"] = df['Order Date'].str[0:2]
df["Month"] = df['Month'].astype('int32')
print(df["Month"])
#Adding City
df['City'] = df['Purchase Address'].apply(lambda x: f"{city(x)}")
#Converting into Numeric
df['Quantity Ordered'] = pd.to_numeric(df['Quantity Ordered'])
print(df["Quantity Ordered"])
df["Price Each"] = df['Price Each'].astype('int32')
df["Quantity Ordered"] = df['Quantity Ordered'].astype('int32')
df["Order ID"] = df['Order ID'].astype('int32')
#Getting Total Price
df["Final Price"] = df["Quantity Ordered"]*df["Price Each"]
df["Final Price"] = df["Final Price"].astype('int32')
print(df)
#Best Month for Sales
df.groupby(["Month"]).sum(numeric_only=True)
#City sold most products
city_maximum = df.groupby(["City"]).sum(numeric_only=True)
print(max(city_maximum))

# Calculated the mean, median, and standard deviation
mean = df['Price Each'].mean()
median = df['Price Each'].median()
std = df['Price Each'].std()
print("Mean:", mean)
print()
print("Median:", median)
print()
print("Standard Deviation:", std)
print()
# Counted the number of unique values
unique = df['Product'].nunique()
print("Number of unique values:", unique)
print()
# Filtered rows where Price Each is greater than 99
filtered = df[df['Price Each'] > 99]
print(filtered)
print()
# Sorted the DataFrame by the 'Product' column in descending order
sorted = df.sort_values(by='Product', ascending=False)
print(sorted)
print()
# Counted word occurrences in the 'Product' column
words = df['Product'].str.split().explode().value_counts()
print(words)
print()
# Calculated the cumulative sum of column 'Price Each'
cumulative_sum = df['Price Each'].cumsum()
print("Cumulative Sum:",cumulative_sum)
print()
# Calculated the cumulative product of column 'A'
cumulative_product = df['Price Each'].cumprod()
print("Cumulative Sum:",cumulative_product)
print()
# Calculated the correlation matrix with numerical columns
Month = df.select_dtypes(include='number').columns
CorrelationMatrix = df[Month].corr()
print(CorrelationMatrix)
print()
# Displaying the summary
description = df.describe()
print(description)
print()

#USING groupby operations
print("GROUPBY ------->>>")
print(df)
NumericCols1 = df.select_dtypes(include='number').columns
DF1 = df.groupby('Month')[NumericCols1].mean()
print(DF1)
DF2 = df.groupby(['Price Each', 'Quantity Ordered']).sum(numeric_only=True)
print(DF2)
DF3 = df.groupby('Month').max()
print(DF3)
DF4 = df.groupby('Month').min()
print(DF4)
DF5 = df.groupby('Month').count()
NumericCols2 = df.select_dtypes(include='number').columns
print(DF5)
DF6 = df.groupby('Month')[NumericCols2].median()
NumericCols2 = df.select_dtypes(include='number').columns
print(DF6)
DF7 = df.groupby('Month')[NumericCols2].std(numeric_only=True)
print(DF7)
DF8 = df.groupby('Month').agg({'Quantity Ordered': 'sum', 'Price Each': ['mean', 'max']})
print(DF8)
DF9 = df.groupby('Month').agg({'Quantity Ordered': 'sum', 'Price Each': 'mean'})
print(DF9)
DF10 = df.groupby('Month')['Quantity Ordered'].cumsum()
print(DF10)

# Finally Saving the DataFrame to a CSV file
df.to_csv('Data.csv', index=False)